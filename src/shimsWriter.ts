import * as autoproj from "./autoproj";
import { fs } from "./cmt/pr";
import * as path from "path";

function pythonGenerator(workspace: autoproj.Workspace) {
    return `\
#!/bin/sh

# AUTOGENERATED BY THE VSCODE AUTOPROJ EXTENSION

VSCODE_PYTHONPATH="$PYTHONPATH"
. ${path.join(workspace.root, "env.sh")}

if [ "\${VSCODE_PYTHONPATH}x" != "x" ]; then
    PYTHONPATH="$VSCODE_PYTHONPATH:$PYTHONPATH"
fi
exec python "$@"
`
}

function gdbGenerator(workspace: autoproj.Workspace) {
    return `\
#!/bin/sh

# AUTOGENERATED BY THE VSCODE AUTOPROJ EXTENSION

exec ${autoproj.autoprojExePath(workspace.root)} exec --use-cache gdb "$@"
`
}

function rubyGenerator(workspace: autoproj.Workspace) {
    return `\
#!/bin/sh

# AUTOGENERATED BY THE VSCODE AUTOPROJ EXTENSION

exec ${autoproj.autoprojExePath(workspace.root)} exec --use-cache ruby "$@"
`
}

export class ShimsWriter {
    public static readonly RELATIVE_OPTS_PATH = path.join(".autoproj", "vscode-autoproj");
    public static readonly RELATIVE_SHIMS_PATH = path.join(ShimsWriter.RELATIVE_OPTS_PATH, "bin");

    constructor() {
    }

    private async _mkShimDir(workspace: autoproj.Workspace): Promise<void> {
        await fs.mkdir_p(path.join(workspace.root, ShimsWriter.RELATIVE_SHIMS_PATH));
    }


    private async _writeShim(
        workspace: autoproj.Workspace,
        name: string,
        generator: (workspace: autoproj.Workspace) => string
    ): Promise<void> {
        const shimPath = path.join(workspace.root, ShimsWriter.RELATIVE_SHIMS_PATH, name);
        await this._mkShimDir(workspace);
        await fs.writeFile(shimPath, generator(workspace));
        await fs.chmod(shimPath, "0755");
    }

    public async writePython(workspace: autoproj.Workspace): Promise<void> {
        return await this._writeShim(workspace, "python", pythonGenerator);
    }

    public async writeGdb(workspace: autoproj.Workspace): Promise<void> {
        return await this._writeShim(workspace, "gdb", gdbGenerator);
    }

    public async writeRuby(workspace: autoproj.Workspace): Promise<void> {
        return await this._writeShim(workspace, "ruby", rubyGenerator);
    }

    public async writeOpts(workspace: autoproj.Workspace): Promise<void> {
        const optsPath = path.join(workspace.root, ShimsWriter.RELATIVE_OPTS_PATH, "rubyopt.rb");
        const contents = [
            "# AUTOGENERATED BY THE VSCODE AUTOPROJ EXTENSION",
            "STDOUT.sync = true",
            "STDERR.sync = true",
        ]

        await this._mkShimDir(workspace);
        await fs.writeFile(optsPath, contents.join("\n"));
    }
}