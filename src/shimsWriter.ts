import * as autoproj from "./autoproj";
import { fs } from "./cmt/pr";
import * as path from "path";

function pythonGenerator(workspace: autoproj.Workspace) {
    return `\
#!/bin/sh

# AUTOGENERATED BY THE VSCODE AUTOPROJ EXTENSION

VSCODE_PYTHONPATH="$PYTHONPATH"
. ${path.join(workspace.root, "env.sh")}

if [ "\${VSCODE_PYTHONPATH}x" != "x" ]; then
    PYTHONPATH="$VSCODE_PYTHONPATH:$PYTHONPATH"
fi
exec python "$@"
`
}

function gdbGenerator(workspace: autoproj.Workspace) {
    return `\
#!/bin/sh

# AUTOGENERATED BY THE VSCODE AUTOPROJ EXTENSION

exec ${autoproj.autoprojExePath(workspace.root)} exec --use-cache gdb "$@"
`
}

export class ShimsWriter {
    public static readonly RELATIVE_SHIMS_PATH = path.join(".autoproj", "vscode-autoproj", "bin");

    constructor() {
    }

    public async mkShimDir(workspace: autoproj.Workspace): Promise<void> {
        await fs.mkdir_p(path.join(workspace.root, ShimsWriter.RELATIVE_SHIMS_PATH));
    }

    public async writePython(workspace: autoproj.Workspace): Promise<void> {
        const pythonShimPath = path.join(workspace.root, ShimsWriter.RELATIVE_SHIMS_PATH, "python");
        await this.mkShimDir(workspace);
        await fs.writeFile(pythonShimPath, pythonGenerator(workspace));
        await fs.chmod(pythonShimPath, "0755");
    }

    public async writeGdb(workspace: autoproj.Workspace): Promise<void> {
        const gdbShimPath = path.join(workspace.root, ShimsWriter.RELATIVE_SHIMS_PATH, "gdb");
        await this.mkShimDir(workspace);
        await fs.writeFile(gdbShimPath, gdbGenerator(workspace));
        await fs.chmod(gdbShimPath, "0755");
    }
}